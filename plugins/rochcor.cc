#include "rochcor.h"
#include <TLorentzVector.h>


const float rochcor::netabin[9] = {-2.4,-2.1,-1.4,-0.7,0.0,0.7,1.4,2.1,2.4};

const float rochcor::dcor_bfA[8][8]={{-0.000142743,-0.000036226,0.000051764,-0.000072222,-0.000021038,0.000019117,-0.000089154,-0.000204583},
				     {0.000223588,0.000110246,0.000042693,-0.000025221,0.000003313,0.000046897,-0.000028623,0.000221683},
				     {0.000047612,-0.000046739,0.000001427,0.000011908,0.000044856,-0.000036276,-0.000027887,0.000047326},
				     {-0.000183597,-0.000069846,0.000035879,-0.000056846,-0.000059447,-0.000031949,0.000003738,-0.000010489},
				     {-0.000005487,-0.000010197,0.000049991,0.000059226,0.000007370,-0.000087737,-0.000084102,0.000071253},
				     {-0.000104614,-0.000168853,-0.000074505,0.000046228,0.000035782,-0.000052173,-0.000084344,0.000039482},
				     {-0.000149674,-0.000112083,-0.000043008,0.000039091,0.000031253,-0.000020955,-0.000142876,-0.000137497},
				     {-0.000073921,-0.000115444,0.000026593,0.000041973,-0.000028536,-0.000018246,-0.000081279,-0.000062423}};

const float rochcor::dcor_maA[8][8]={{0.000790402,0.000086899,-0.000124666,-0.000162817,-0.000017890,-0.000107527,0.000402916,0.001481570},
				      {0.001347438,0.000270820,-0.000052918,-0.000117121,-0.000099353,-0.000024837,0.000174250,0.000441905},
				      {0.000339700,0.000191784,0.000058352,0.000115598,0.000056172,0.000087524,0.000145662,0.000322858},
				      {-0.001464282,-0.000366462,0.000082164,0.000129240,0.000176483,0.000109815,0.000018172,0.000218386},
				      {-0.002150077,-0.000427085,0.000099829,-0.000017023,0.000125268,0.000262244,0.000136151,-0.000405552},
				      {-0.001512306,-0.000429783,-0.000056692,-0.000034385,-0.000043536,-0.000003327,0.000014562,-0.000224714},
				      {0.000056443,-0.000168688,-0.000018629,-0.000060776,-0.000068214,-0.000128513,-0.000085273,0.001290037},
				      {0.000105142,-0.000058878,-0.000084003,-0.000078240,-0.000151620,-0.000187715,0.000080029,0.001631192}};

const float rochcor::mcor_bfA[8][8]={{-0.000063713,-0.000029352,-0.000000867,0.000032270,0.000015492,0.000008083,-0.000069408,-0.000091716},
				      {-0.000060494,-0.000002986,0.000012797,-0.000031184,-0.000031340,-0.000006048,0.000013469,-0.000020202},
				      {-0.000022997,-0.000043807,-0.000007016,-0.000030670,-0.000020740,-0.000016735,-0.000007218,-0.000065682},
				      {-0.000041813,-0.000042280,0.000013533,-0.000002547,-0.000017769,-0.000011282,-0.000022693,-0.000099361},
				      {-0.000031962,-0.000022918,0.000009196,0.000027077,0.000002257,-0.000016681,-0.000017862,-0.000056932},
				      {-0.000026284,-0.000053526,-0.000000128,0.000026427,0.000034433,-0.000004638,-0.000023034,-0.000069140},
				      {-0.000109084,-0.000073483,-0.000007053,0.000037945,0.000037618,-0.000016044,-0.000053256,-0.000045541},
				      {-0.000063455,-0.000018084,-0.000009968,-0.000004891,-0.000018822,0.000001771,-0.000021826,-0.000079626}};

const float rochcor::mcor_maA[8][8]={{0.000950726,0.000132997,-0.000166230,-0.000178984,-0.000175606,-0.000184543,0.000028977,0.000145090},
				      {0.001082393,0.000012119,-0.000105033,-0.000095558,-0.000087842,-0.000050033,0.000203732,0.000781017},
				      {0.000522823,-0.000027809,0.000020088,0.000027120,0.000029425,0.000063659,0.000059290,0.000007311},
				      {0.000659471,0.000426387,0.000184802,0.000127485,0.000153550,0.000143188,0.000325332,0.000307829},
				      {0.000842162,0.000490264,0.000212897,0.000147332,0.000174670,0.000153595,0.000327076,0.001000893},
				      {-0.001242714,-0.000155280,0.000101135,0.000094522,0.000093880,0.000066729,0.000141144,0.000810823},
				      {-0.001757072,-0.000320008,-0.000029266,-0.000022502,-0.000040205,-0.000056041,-0.000149048,-0.000221401},
				      {0.000408788,0.000114598,-0.000141981,-0.000110819,-0.000115938,-0.000138071,-0.000784406,-0.002160131}};

const float rochcor::dcor_bfAer[8][8]={{0.000069681,0.000035377,0.000030160,0.000028300,0.000028481,0.000030308,0.000035908,0.000066403},
				       {0.000063562,0.000035195,0.000029976,0.000028288,0.000028251,0.000030304,0.000035175,0.000063468},
				       {0.000066084,0.000036266,0.000030191,0.000028046,0.000028118,0.000029895,0.000035353,0.000063882},
				       {0.000064693,0.000035627,0.000029777,0.000028668,0.000028323,0.000030154,0.000034876,0.000063622},
				       {0.000065655,0.000035484,0.000030380,0.000028062,0.000028263,0.000030324,0.000035823,0.000068903},
				       {0.000062857,0.000034907,0.000029606,0.000028968,0.000028557,0.000029858,0.000034830,0.000063717},
				       {0.000066211,0.000035707,0.000029803,0.000028436,0.000028707,0.000029851,0.000035014,0.000064730},
				       {0.000065003,0.000035761,0.000030160,0.000028192,0.000028342,0.000029811,0.000035545,0.000063645}};

const float rochcor::dcor_maAer[8][8]={{0.000069681,0.000035377,0.000030160,0.000028300,0.000028481,0.000030308,0.000035908,0.000066403},
				       {0.000063562,0.000035195,0.000029976,0.000028288,0.000028251,0.000030304,0.000035175,0.000063468},
				       {0.000066084,0.000036266,0.000030191,0.000028046,0.000028118,0.000029895,0.000035353,0.000063882},
				       {0.000064693,0.000035627,0.000029777,0.000028668,0.000028323,0.000030154,0.000034876,0.000063622},
				       {0.000065655,0.000035484,0.000030380,0.000028062,0.000028263,0.000030324,0.000035823,0.000068903},
				       {0.000062857,0.000034907,0.000029606,0.000028968,0.000028557,0.000029858,0.000034830,0.000063717},
				       {0.000066211,0.000035707,0.000029803,0.000028436,0.000028707,0.000029851,0.000035014,0.000064730},
				       {0.000065003,0.000035761,0.000030160,0.000028192,0.000028342,0.000029811,0.000035545,0.000063645}};

const float rochcor::mcor_bfAer[8][8]={{0.000028957,0.000015643,0.000013419,0.000012634,0.000012700,0.000013592,0.000016042,0.000028597},
				       {0.000027958,0.000015560,0.000013545,0.000012820,0.000012798,0.000013524,0.000015725,0.000027844},
				       {0.000027910,0.000015737,0.000013522,0.000012785,0.000012761,0.000013554,0.000015626,0.000027776},
				       {0.000028081,0.000015884,0.000013473,0.000012691,0.000012659,0.000013430,0.000015598,0.000027889},
				       {0.000027971,0.000015665,0.000013466,0.000012651,0.000012648,0.000013558,0.000016132,0.000029045},
				       {0.000027824,0.000015624,0.000013452,0.000012922,0.000012881,0.000013473,0.000015628,0.000027859},
				       {0.000028053,0.000015657,0.000013501,0.000012726,0.000012889,0.000013432,0.000015494,0.000027716},
				       {0.000028212,0.000015901,0.000013511,0.000012648,0.000012674,0.000013507,0.000015666,0.000027969}};

const float rochcor::mcor_maAer[8][8]={{0.000028957,0.000015643,0.000013419,0.000012634,0.000012700,0.000013592,0.000016042,0.000028597},
				      {0.000027958,0.000015560,0.000013545,0.000012820,0.000012798,0.000013524,0.000015725,0.000027844},
				      {0.000027910,0.000015737,0.000013522,0.000012785,0.000012761,0.000013554,0.000015626,0.000027776},
				      {0.000028081,0.000015884,0.000013473,0.000012691,0.000012659,0.000013430,0.000015598,0.000027889},
				      {0.000027971,0.000015665,0.000013466,0.000012651,0.000012648,0.000013558,0.000016132,0.000029045},
				      {0.000027824,0.000015624,0.000013452,0.000012922,0.000012881,0.000013473,0.000015628,0.000027859},
				      {0.000028053,0.000015657,0.000013501,0.000012726,0.000012889,0.000013432,0.000015494,0.000027716},
				      {0.000028212,0.000015901,0.000013511,0.000012648,0.000012674,0.000013507,0.000015666,0.000027969}};


//=======================================================================================================

const float rochcor::dmavgA[8][8]={{0.025862252,0.025172750,0.025027910,0.025421769,0.025426939,0.025008459,0.025212677,0.025967373},
				   {0.025851336,0.025132779,0.025017680,0.025478869,0.025465739,0.025010932,0.025166885,0.025856208},
				   {0.025830366,0.025177726,0.025039451,0.025473952,0.025474169,0.025040309,0.025147619,0.025798221},
				   {0.025838805,0.025182299,0.025018685,0.025468044,0.025430159,0.025010909,0.025187564,0.025842634},
				   {0.025769554,0.025184648,0.025013935,0.025420950,0.025458869,0.025018413,0.025192182,0.025839588},
				   {0.025792547,0.025144101,0.025037236,0.025470944,0.025475837,0.025037786,0.025165200,0.025839090},
				   {0.025857355,0.025165711,0.025019151,0.025463326,0.025476405,0.025016672,0.025140264,0.025857103},
				   {0.025899233,0.025206273,0.025012581,0.025421019,0.025419154,0.025030674,0.025176606,0.025870363}};

const float rochcor::dpavgA[8][8]={{0.025896801,0.025207060,0.025022377,0.025450773,0.025465020,0.025024328,0.025232426,0.025958583},
				   {0.025878863,0.025157502,0.025009433,0.025497418,0.025475635,0.025022438,0.025172251,0.025882630},
				   {0.025939660,0.025219433,0.025004941,0.025474331,0.025488718,0.025028949,0.025178689,0.025878562},
				   {0.026036977,0.025237118,0.025024542,0.025463179,0.025441815,0.024999530,0.025207440,0.025971621},
				   {0.026079108,0.025224185,0.024992346,0.025446966,0.025458709,0.025030395,0.025220967,0.025986832},
				   {0.025936908,0.025208144,0.025032113,0.025488688,0.025477168,0.025008996,0.025224422,0.025972734},
				   {0.025921144,0.025194160,0.025024179,0.025474549,0.025498936,0.025021801,0.025186651,0.025913572},
				   {0.025953952,0.025255804,0.025022061,0.025463364,0.025441087,0.025024397,0.025210182,0.025883101}};

const float rochcor::mmavgA[8][8]={{0.025859084,0.025171574,0.025031055,0.025414657,0.025421970,0.025005626,0.025202085,0.025905427},
				   {0.025820029,0.025133587,0.025017091,0.025474822,0.025465318,0.025012641,0.025166745,0.025890426},
				   {0.025843527,0.025164085,0.025038476,0.025478059,0.025477999,0.025038661,0.025147011,0.025803665},
				   {0.025876173,0.025204137,0.025021527,0.025462181,0.025430126,0.025017812,0.025204524,0.025839771},
				   {0.025861181,0.025205469,0.025018335,0.025426248,0.025460153,0.025022144,0.025196286,0.025888667},
				   {0.025758405,0.025144612,0.025037865,0.025474080,0.025474752,0.025036212,0.025167523,0.025862979},
				   {0.025807403,0.025158727,0.025014627,0.025464075,0.025472244,0.025021210,0.025130780,0.025783651},
				   {0.025905758,0.025201579,0.025009920,0.025423990,0.025416973,0.025032037,0.025147863,0.025760345}};

const float rochcor::mpavgA[8][8]={{0.025888818,0.025206935,0.025026146,0.025442136,0.025470197,0.025027800,0.025243407,0.025952872},
				   {0.025923013,0.025178692,0.025011691,0.025498907,0.025477111,0.025023833,0.025166403,0.025886905},
				   {0.025943006,0.025225756,0.025007080,0.025476595,0.025488864,0.025026658,0.025179579,0.025889859},
				   {0.025949377,0.025208820,0.025021340,0.025454777,0.025444410,0.024996581,0.025195810,0.025967101},
				   {0.025950823,0.025197201,0.024994630,0.025441154,0.025458403,0.025024723,0.025211150,0.025938079},
				   {0.025939334,0.025189405,0.025023127,0.025486532,0.025474880,0.025007298,0.025220661,0.025942054},
				   {0.025997086,0.025189140,0.025022336,0.025471484,0.025493603,0.025012869,0.025188219,0.025964187},
				   {0.025944809,0.025237280,0.025027926,0.025469723,0.025445395,0.025024964,0.025234456,0.026013442}};

//=======================================================================================================

const float rochcor::dcor_bfB[8][8]={{-0.000253397,-0.000137756,0.000024861,0.000008023,0.000001983,-0.000011928,-0.000124759,-0.000195492},
				     {-0.000146076,-0.000086378,-0.000035690,-0.000000115,0.000010346,0.000000315,-0.000039342,-0.000032468},
				     {0.000012701,-0.000021798,0.000027051,0.000003695,0.000027016,-0.000058675,-0.000094091,-0.000030377},
				     {-0.000149759,-0.000069317,0.000020253,0.000035208,-0.000051643,-0.000017869,-0.000116247,-0.000039054},
				     {-0.000179445,-0.000121053,-0.000042942,0.000003063,0.000052154,-0.000019843,-0.000009375,-0.000068859},
				     {-0.000245478,-0.000184120,-0.000027927,0.000072480,0.000000580,-0.000036889,-0.000069278,0.000056153},
				     {-0.000072006,-0.000074214,0.000040408,0.000094052,0.000095790,-0.000057313,-0.000065966,-0.000091374},
				     {-0.000158027,-0.000083126,-0.000041889,0.000022813,0.000045780,-0.000035878,-0.000056668,-0.000129253}};

const float rochcor::dcor_maB[8][8]={{0.000623586,0.000130325,-0.000153412,-0.000312646,-0.000128320,-0.000067178,0.000348989,0.001244046},
				     {0.001030520,0.000104772,-0.000055357,-0.000042600,-0.000053103,-0.000068003,0.000159504,0.000420179},
				     {0.000292067,0.000050057,0.000005552,0.000069906,0.000104072,0.000026762,0.000060355,0.000507750},
				     {-0.001446398,-0.000389174,0.000034119,0.000096233,0.000164692,0.000192312,-0.000007040,0.000265715},
				     {-0.001743855,-0.000424077,-0.000007202,0.000070721,0.000210992,0.000307419,0.000113390,-0.000389757},
				     {-0.001134171,-0.000259505,0.000001742,0.000090900,0.000008172,0.000071348,0.000143139,-0.000256233},
				     {-0.000056480,-0.000140610,-0.000075255,-0.000048042,-0.000043134,-0.000148024,0.000050974,0.001304695},
				     {0.000353256,0.000005151,-0.000152625,-0.000196030,-0.000126960,-0.000136645,0.000129807,0.001754751}};

const float rochcor::mcor_bfB[8][8]={{-0.000072402,-0.000058879,0.000003018,0.000018626,0.000007212,-0.000005316,-0.000095954,-0.000125599},
				     {-0.000061846,-0.000003202,0.000014083,-0.000033514,-0.000039273,0.000004540,0.000009430,-0.000017489},
				     {-0.000031382,-0.000047138,-0.000019203,-0.000024139,-0.000038678,-0.000040859,0.000012155,-0.000065070},
				     {-0.000056882,-0.000031030,0.000024829,0.000013713,-0.000010394,-0.000020459,-0.000045276,-0.000057322},
				     {-0.000043675,0.000008459,0.000015752,0.000013816,-0.000008688,-0.000031616,-0.000032060,-0.000053715},
				     {0.000000487,-0.000064518,0.000019284,0.000045588,0.000028956,-0.000002070,-0.000029702,-0.000080368},
				     {-0.000108752,-0.000075013,-0.000016411,0.000050559,0.000042682,-0.000014198,-0.000064707,-0.000072518},
				     {-0.000039973,-0.000016213,0.000000336,0.000004890,-0.000014730,-0.000011327,-0.000006556,-0.000088452}};

const float rochcor:: mcor_maB[8][8]={{0.000974618,0.000128823,-0.000152265,-0.000186697,-0.000167048,-0.000204591,0.000008788,0.000152219},
				      {0.001104959,0.000007490,-0.000113518,-0.000115239,-0.000087118,-0.000054860,0.000210312,0.000761740},
				      {0.000495175,-0.000021281,0.000019935,0.000025729,0.000026502,0.000058051,0.000080846,0.000040006},
				      {0.000679721,0.000425605,0.000190407,0.000121199,0.000160504,0.000146688,0.000321539,0.000309533},
				      {0.000862263,0.000497438,0.000205395,0.000146674,0.000179833,0.000151782,0.000320139,0.000994401},
				      {-0.001264907,-0.000156277,0.000113008,0.000094040,0.000099709,0.000062566,0.000128300,0.000821240},
				      {-0.001737087,-0.000315566,-0.000028978,-0.000021989,-0.000026353,-0.000042322,-0.000148004,-0.000245085},
				      {0.000404257,0.000109031,-0.000120937,-0.000124930,-0.000110856,-0.000152148,-0.000770993,-0.002169186}};


const float rochcor::dcor_bfBer[8][8]={{0.000073392,0.000037888,0.000030941,0.000028542,0.000028942,0.000031034,0.000038166,0.000071498},
				       {0.000067919,0.000036855,0.000030957,0.000028460,0.000028904,0.000030892,0.000036525,0.000067771},
				       {0.000069890,0.000037252,0.000030693,0.000028233,0.000028295,0.000030924,0.000036761,0.000067732},
				       {0.000068865,0.000037515,0.000030440,0.000028521,0.000028758,0.000031061,0.000036545,0.000067957},
				       {0.000070287,0.000038039,0.000031099,0.000028541,0.000028535,0.000030889,0.000038192,0.000073368},
				       {0.000070529,0.000036023,0.000030708,0.000029111,0.000029156,0.000030485,0.000037271,0.000069426},
				       {0.000068987,0.000036834,0.000030454,0.000028355,0.000028894,0.000030568,0.000036321,0.000069434},
				       {0.000069238,0.000037352,0.000030916,0.000028682,0.000028282,0.000030943,0.000037054,0.000068690}};

const float rochcor::dcor_maBer[8][8]={{0.000073392,0.000037888,0.000030941,0.000028542,0.000028942,0.000031034,0.000038166,0.000071498},
				       {0.000067919,0.000036855,0.000030957,0.000028460,0.000028904,0.000030892,0.000036525,0.000067771},
				       {0.000069890,0.000037252,0.000030693,0.000028233,0.000028295,0.000030924,0.000036761,0.000067732},
				       {0.000068865,0.000037515,0.000030440,0.000028521,0.000028758,0.000031061,0.000036545,0.000067957},
				       {0.000070287,0.000038039,0.000031099,0.000028541,0.000028535,0.000030889,0.000038192,0.000073368},
				       {0.000070529,0.000036023,0.000030708,0.000029111,0.000029156,0.000030485,0.000037271,0.000069426},
				       {0.000068987,0.000036834,0.000030454,0.000028355,0.000028894,0.000030568,0.000036321,0.000069434},
				       {0.000069238,0.000037352,0.000030916,0.000028682,0.000028282,0.000030943,0.000037054,0.000068690}};

const float rochcor::mcor_bfBer[8][8]={{0.000031813,0.000016534,0.000013999,0.000013046,0.000013123,0.000014245,0.000016964,0.000031719},
				       {0.000030718,0.000016483,0.000014127,0.000013244,0.000013198,0.000014151,0.000016711,0.000030863},
				       {0.000030665,0.000016682,0.000014126,0.000013207,0.000013188,0.000014194,0.000016551,0.000030725},
				       {0.000030997,0.000016830,0.000014015,0.000013110,0.000013070,0.000014090,0.000016538,0.000030930},
				       {0.000030883,0.000016557,0.000014048,0.000013105,0.000013067,0.000014169,0.000017090,0.000032174},
				       {0.000030553,0.000016523,0.000014045,0.000013333,0.000013320,0.000014083,0.000016591,0.000030854},
				       {0.000030886,0.000016615,0.000014077,0.000013136,0.000013316,0.000014054,0.000016452,0.000030541},
				       {0.000031052,0.000016845,0.000014093,0.000013053,0.000013071,0.000014144,0.000016638,0.000031061}};

const float rochcor::mcor_maBer[8][8]={{0.000031813,0.000016534,0.000013999,0.000013046,0.000013123,0.000014245,0.000016964,0.000031719},
				       {0.000030718,0.000016483,0.000014127,0.000013244,0.000013198,0.000014151,0.000016711,0.000030863},
				       {0.000030665,0.000016682,0.000014126,0.000013207,0.000013188,0.000014194,0.000016551,0.000030725},
				       {0.000030997,0.000016830,0.000014015,0.000013110,0.000013070,0.000014090,0.000016538,0.000030930},
				       {0.000030883,0.000016557,0.000014048,0.000013105,0.000013067,0.000014169,0.000017090,0.000032174},
				       {0.000030553,0.000016523,0.000014045,0.000013333,0.000013320,0.000014083,0.000016591,0.000030854},
				       {0.000030886,0.000016615,0.000014077,0.000013136,0.000013316,0.000014054,0.000016452,0.000030541},
				       {0.000031052,0.000016845,0.000014093,0.000013053,0.000013071,0.000014144,0.000016638,0.000031061}};

//=======================================================================================================

const float rochcor::dmavgB[8][8]={{0.025938774,0.025266827,0.025022293,0.025374338,0.025372916,0.025005996,0.025240074,0.026067392},
				   {0.025894727,0.025191097,0.025013219,0.025419539,0.025390481,0.025019205,0.025198246,0.025935809},
				   {0.025912919,0.025224576,0.025030573,0.025419982,0.025415115,0.025043226,0.025213202,0.025937655},
				   {0.025903638,0.025244655,0.025023684,0.025383398,0.025399556,0.025025292,0.025254252,0.025945694},
				   {0.025855091,0.025245849,0.025018633,0.025392413,0.025386199,0.025032433,0.025258546,0.025938246},
				   {0.025898044,0.025210425,0.025039174,0.025411554,0.025418325,0.025034439,0.025230630,0.025873626},
				   {0.025908219,0.025191441,0.025016559,0.025382898,0.025416337,0.025011142,0.025181345,0.025906562},
				   {0.026026606,0.025235830,0.025005632,0.025369690,0.025375398,0.025027767,0.025254124,0.025961736}};

const float rochcor::dpavgB[8][8]={{0.025993525,0.025262074,0.025032936,0.025402927,0.025411082,0.025025205,0.025257010,0.025987816},
				   {0.026016457,0.025236788,0.025026049,0.025445870,0.025426455,0.025012605,0.025226581,0.026018325},
				   {0.026046038,0.025298641,0.025007364,0.025396512,0.025432880,0.025031159,0.025238138,0.025957892},
				   {0.026067569,0.025302059,0.025011169,0.025396687,0.025370463,0.024996758,0.025241644,0.026118577},
				   {0.026205140,0.025263103,0.025003300,0.025373572,0.025393818,0.025008397,0.025280542,0.026013350},
				   {0.026010447,0.025247521,0.025027158,0.025427902,0.025395642,0.025008772,0.025299819,0.026073297},
				   {0.026045245,0.025236978,0.025011242,0.025420223,0.025442011,0.025030245,0.025237170,0.025985402},
				   {0.026017886,0.025261768,0.025024263,0.025412894,0.025397047,0.025037108,0.025256271,0.025938284}};

const float rochcor::mmavgB[8][8]={{0.025922899,0.025253554,0.025024570,0.025376081,0.025366729,0.025000526,0.025238491,0.026010632},
				   {0.025886079,0.025183953,0.025007207,0.025415872,0.025388657,0.025019143,0.025195823,0.025930482},
				   {0.025934619,0.025227622,0.025035391,0.025418887,0.025417957,0.025042034,0.025207412,0.025915978},
				   {0.025975643,0.025271630,0.025027551,0.025387821,0.025396539,0.025023647,0.025264276,0.025925383},
				   {0.025951465,0.025261106,0.025024150,0.025395296,0.025387278,0.025029785,0.025264818,0.025972973},
				   {0.025864186,0.025203249,0.025038447,0.025414974,0.025419505,0.025033609,0.025228557,0.025950473},
				   {0.025857412,0.025190903,0.025020008,0.025387552,0.025414808,0.025008508,0.025180904,0.025854423},
				   {0.026021465,0.025234665,0.025004645,0.025369725,0.025376778,0.025027170,0.025226526,0.025825617}};

const float rochcor::mpavgB[8][8]={{0.025972655,0.025257853,0.025030870,0.025399462,0.025417248,0.025026830,0.025266203,0.026020858},
				   {0.026012686,0.025235199,0.025023719,0.025450310,0.025427728,0.025011407,0.025226418,0.026002827},
				   {0.026042418,0.025301180,0.025007263,0.025397603,0.025435786,0.025029248,0.025229272,0.025961233},
				   {0.025988419,0.025271262,0.025005581,0.025394773,0.025372960,0.024995658,0.025227015,0.026099192},
				   {0.026098501,0.025217605,0.024991889,0.025370425,0.025396433,0.025007798,0.025271868,0.025980209},
				   {0.026023494,0.025241938,0.025023119,0.025431178,0.025393405,0.025007651,0.025298716,0.026031118},
				   {0.026105678,0.025244646,0.025012836,0.025423016,0.025446063,0.025025461,0.025247461,0.026041311},
				   {0.026005132,0.025261163,0.025024802,0.025413312,0.025401136,0.025030499,0.025288682,0.026116802}};

//=======================================================================================================

// incremental correction on top of MuscleFit for data
const float rochcor::dcor_bf_muscle[8][8]={{-0.000162673,-0.000047589,0.000037021,-0.000095793,-0.000043765,-0.000006243,-0.000085774,-0.000201563},
					   {0.000231906,0.000065487,0.000025240,0.000002079,0.000028443,0.000032015,-0.000077682,0.000181189},
					   {0.000011939,-0.000048316,-0.000007489,0.000033570,0.000060447,-0.000030663,-0.000074522,0.000004253},
					   {-0.000218088,-0.000059305,0.000015492,-0.000064564,-0.000053931,-0.000036397,-0.000013343,0.000004081},
					   {-0.000042473,-0.000013249,0.000040576,0.000027629,0.000007762,-0.000077024,-0.000102740,0.000049941},
					   {-0.000105152,-0.000139022,-0.000078581,0.000027723,0.000012002,-0.000047076,-0.000089156,0.000054303},
					   {-0.000140662,-0.000080183,-0.000046946,0.000008813,0.000001821,-0.000011909,-0.000126726,-0.000155634},
					   {-0.000119202,-0.000146354,0.000022223,0.000050348,-0.000000395,-0.000026600,-0.000079921,-0.000040505}};

const float rochcor::dcor_ma_muscle[8][8]={{0.000922114,0.000122016,-0.000104427,-0.000009732,0.000110619,-0.000128943,0.000273161,0.001263345},
					   {0.001397084,0.000242269,-0.000091024,-0.000079004,-0.000059661,-0.000096526,-0.000004115,0.000148291},
					   {0.000467874,0.000214779,0.000028824,0.000058329,-0.000011060,-0.000026892,-0.000044538,0.000047608},
					   {-0.001194958,-0.000255102,0.000090557,0.000021734,0.000018929,-0.000005597,-0.000182582,-0.000049914},
					   {-0.001806358,-0.000171964,0.000164841,-0.000118822,-0.000029894,0.000188520,0.000020351,-0.000665749},
					   {-0.001151867,-0.000165302,0.000084233,-0.000066553,-0.000090629,-0.000026413,-0.000054580,-0.000395975},
					   {0.000368289,0.000062772,0.000121922,0.000011695,-0.000001259,-0.000092503,-0.000136866,0.001151411},
					   {0.000311309,0.000063763,0.000011298,0.000055447,-0.000037567,-0.000181569,-0.000008553,0.001446248}};

const float rochcor::dmavg_muscle[8][8]={{0.025841231,0.025174521,0.025008076,0.025400913,0.025420898,0.025016609,0.025216421,0.025946342},
					 {0.025857748,0.025127432,0.025008648,0.025501019,0.025491937,0.025010914,0.025126947,0.025834595},
					 {0.025821679,0.025184625,0.025040057,0.025499918,0.025484988,0.025037817,0.025108426,0.025777794},
					 {0.025800164,0.025206036,0.025014013,0.025443986,0.025461735,0.025014652,0.025194244,0.025845887},
					 {0.025758598,0.025178983,0.025018260,0.025389631,0.025467834,0.025030688,0.025175725,0.025854529},
					 {0.025806474,0.025167197,0.025042585,0.025454513,0.025447764,0.025030972,0.025151812,0.025817656},
					 {0.025889342,0.025197739,0.025020324,0.025441008,0.025445285,0.025018914,0.025141775,0.025827521},
					 {0.025890673,0.025200190,0.025007315,0.025444507,0.025453018,0.025050532,0.025170505,0.025896777}};

const float rochcor::dpavg_muscle[8][8]={{0.025900314,0.025202461,0.025036367,0.025436674,0.025457142,0.025007727,0.025250309,0.025944332},
					 {0.025878078,0.025129874,0.024985822,0.025499163,0.025485076,0.025017629,0.025155818,0.025882729},
					 {0.025933738,0.025215997,0.025006775,0.025486310,0.025501310,0.025026139,0.025168886,0.025872179},
					 {0.026047407,0.025224788,0.025009424,0.025481826,0.025447529,0.025016264,0.025194307,0.026008481},
					 {0.026042430,0.025232830,0.024979069,0.025451513,0.025447805,0.025040215,0.025228174,0.025979883},
					 {0.025914677,0.025223959,0.025026520,0.025478732,0.025461927,0.025016013,0.025229203,0.025970294},
					 {0.025960950,0.025206106,0.025024689,0.025455858,0.025482325,0.025042175,0.025227654,0.025905506},
					 {0.025918838,0.025238153,0.025036265,0.025464053,0.025451720,0.025010601,0.025207457,0.025872882}};

const float rochcor::dcor_bfer_muscle[8][8]={{0.000071802,0.000036518,0.000031131,0.000029222,0.000029420,0.000031321,0.000037078,0.000068579},
					     {0.000065656,0.000036343,0.000030987,0.000029230,0.000029190,0.000031275,0.000036334,0.000065454},
					     {0.000068104,0.000037416,0.000031188,0.000028989,0.000029033,0.000030926,0.000036456,0.000065954},
					     {0.000066605,0.000036732,0.000030760,0.000029605,0.000029223,0.000031121,0.000036019,0.000065677},
					     {0.000067720,0.000036679,0.000031389,0.000028981,0.000029181,0.000031333,0.000037076,0.000070893},
					     {0.000064982,0.000036052,0.000030579,0.000029931,0.000029535,0.000030845,0.000035972,0.000065730},
					     {0.000067808,0.000036795,0.000030786,0.000029371,0.000029666,0.000030829,0.000036143,0.000066611},
					     {0.000067135,0.000036907,0.000031150,0.000029097,0.000029279,0.000030835,0.000036646,0.000065409}};

const float rochcor::dcor_maer_muscle[8][8]={{0.000071802,0.000036518,0.000031131,0.000029222,0.000029420,0.000031321,0.000037078,0.000068579},
					     {0.000065656,0.000036343,0.000030987,0.000029230,0.000029190,0.000031275,0.000036334,0.000065454},
					     {0.000068104,0.000037416,0.000031188,0.000028989,0.000029033,0.000030926,0.000036456,0.000065954},
					     {0.000066605,0.000036732,0.000030760,0.000029605,0.000029223,0.000031121,0.000036019,0.000065677},
					     {0.000067720,0.000036679,0.000031389,0.000028981,0.000029181,0.000031333,0.000037076,0.000070893},
					     {0.000064982,0.000036052,0.000030579,0.000029931,0.000029535,0.000030845,0.000035972,0.000065730},
					     {0.000067808,0.000036795,0.000030786,0.000029371,0.000029666,0.000030829,0.000036143,0.000066611},
					     {0.000067135,0.000036907,0.000031150,0.000029097,0.000029279,0.000030835,0.000036646,0.000065409}};

//incremental correction on top of SIDRA for data
const float rochcor::dcor_bf_sidra[8][8]={{-0.000045206,0.000070649,0.000154470,0.000019336,0.000070578,0.000112886,0.000027726,-0.000084039},
					  {0.000358091,0.000184729,0.000142152,0.000112973,0.000138713,0.000151069,0.000037241,0.000298778},
					  {0.000130184,0.000073123,0.000105752,0.000146185,0.000176339,0.000080921,0.000041521,0.000117600},
					  {-0.000093494,0.000060535,0.000129229,0.000048616,0.000061764,0.000079158,0.000108676,0.000129550},
					  {0.000074313,0.000103349,0.000161739,0.000142430,0.000121686,0.000035544,0.000015040,0.000174993},
					  {0.000009156,-0.000016388,0.000033833,0.000140176,0.000123313,0.000065975,0.000024130,0.000173172},
					  {-0.000030482,0.000041382,0.000064651,0.000126170,0.000115843,0.000099456,-0.000003935,-0.000048626},
					  {0.000009727,-0.000027629,0.000141885,0.000162052,0.000118496,0.000093372,0.000035268,0.000082222}};

const float rochcor::dcor_ma_sidra[8][8]={{0.000858080,0.000154900,-0.000062584,-0.000091802,0.000042328,-0.000056795,0.000470263,0.001538480},
					  {0.001321130,0.000252569,-0.000055846,-0.000145016,-0.000109998,-0.000029059,0.000177924,0.000414319},
					  {0.000290698,0.000104619,-0.000002724,0.000038498,-0.000017388,0.000022950,0.000092773,0.000272566},
					  {-0.001498510,-0.000485868,-0.000007104,0.000056605,0.000070715,0.000030183,-0.000089235,0.000128929},
					  {-0.002204834,-0.000464339,0.000029122,-0.000050555,0.000053054,0.000216293,0.000092889,-0.000507291},
					  {-0.001520600,-0.000434507,-0.000043468,-0.000017025,-0.000026538,0.000004915,0.000036668,-0.000221410},
					  {0.000117231,-0.000110607,0.000055365,0.000017957,0.000020354,-0.000038578,-0.000010925,0.001369454},
					  {0.000194426,0.000029145,0.000021284,0.000004459,-0.000077443,-0.000120427,0.000168244,0.001702548}};

const float rochcor::dmavg_sidra[8][8]={{0.025820131,0.025168222,0.025007841,0.025390910,0.025413861,0.025009978,0.025225498,0.025976909},
					{0.025859206,0.025121958,0.025003241,0.025497190,0.025484811,0.025007219,0.025130053,0.025839169},
					{0.025819123,0.025160962,0.025034373,0.025492206,0.025477126,0.025033856,0.025107617,0.025776791},
					{0.025791704,0.025182364,0.025007058,0.025437301,0.025452841,0.025006836,0.025182264,0.025849120},
					{0.025738298,0.025172364,0.025007802,0.025385683,0.025467995,0.025023232,0.025175930,0.025847603},
					{0.025782792,0.025146357,0.025030153,0.025449731,0.025442244,0.025022478,0.025150502,0.025816596},
					{0.025880440,0.025175443,0.025013136,0.025432823,0.025443355,0.025015281,0.025134419,0.025837446},
					{0.025889401,0.025191959,0.024997180,0.025438051,0.025444455,0.025044487,0.025177189,0.025882157}};

const float rochcor::dpavg_sidra[8][8]={{0.025892408,0.025195456,0.025022724,0.025435830,0.025455162,0.025002777,0.025237201,0.025935531},
					{0.025857494,0.025118945,0.024969036,0.025496132,0.025482065,0.025004365,0.025142626,0.025871745},
					{0.025923953,0.025209566,0.025000290,0.025481938,0.025492470,0.025023032,0.025154727,0.025865379},
					{0.026034001,0.025228131,0.025002056,0.025478100,0.025435875,0.025008810,0.025182245,0.025977797},
					{0.026049758,0.025230533,0.024973091,0.025443465,0.025437162,0.025035883,0.025215751,0.025954309},
					{0.025937889,0.025221411,0.025025639,0.025472900,0.025458920,0.025010462,0.025217502,0.025954373},
					{0.025957713,0.025205443,0.025019653,0.025448382,0.025475307,0.025033287,0.025218191,0.025899151},
					{0.025921501,0.025229551,0.025026102,0.025461861,0.025444586,0.025005275,0.025183767,0.025869305}};

const float rochcor::dcor_bfer_sidra[8][8]={{0.000071917,0.000036562,0.000031209,0.000029290,0.000029481,0.000031386,0.000037173,0.000068626},
					    {0.000065821,0.000036425,0.000031071,0.000029278,0.000029264,0.000031375,0.000036435,0.000065554},
					    {0.000068213,0.000037505,0.000031270,0.000029048,0.000029107,0.000030985,0.000036575,0.000066006},
					    {0.000066666,0.000036865,0.000030826,0.000029664,0.000029301,0.000031187,0.000036115,0.000065870},
					    {0.000067816,0.000036717,0.000031451,0.000029042,0.000029241,0.000031379,0.000037152,0.000071290},
					    {0.000065160,0.000036126,0.000030664,0.000030003,0.000029577,0.000030891,0.000036074,0.000065849},
					    {0.000068219,0.000036917,0.000030892,0.000029418,0.000029716,0.000030929,0.000036228,0.000066888},
					    {0.000067245,0.000037013,0.000031202,0.000029159,0.000029316,0.000030890,0.000036775,0.000065607}};

const float rochcor::dcor_maer_sidra[8][8]={{0.000071917,0.000036562,0.000031209,0.000029290,0.000029481,0.000031386,0.000037173,0.000068626},
					    {0.000065821,0.000036425,0.000031071,0.000029278,0.000029264,0.000031375,0.000036435,0.000065554},
					    {0.000068213,0.000037505,0.000031270,0.000029048,0.000029107,0.000030985,0.000036575,0.000066006},
					    {0.000066666,0.000036865,0.000030826,0.000029664,0.000029301,0.000031187,0.000036115,0.000065870},
					    {0.000067816,0.000036717,0.000031451,0.000029042,0.000029241,0.000031379,0.000037152,0.000071290},
					    {0.000065160,0.000036126,0.000030664,0.000030003,0.000029577,0.000030891,0.000036074,0.000065849},
					    {0.000068219,0.000036917,0.000030892,0.000029418,0.000029716,0.000030929,0.000036228,0.000066888},
					    {0.000067245,0.000037013,0.000031202,0.000029159,0.000029316,0.000030890,0.000036775,0.000065607}};

//===============================================================================================
//parameters for Z pt correction

const float rochcor::ptlow[85] = {0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5,
				  6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5,
				  10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5,
				  15.0, 15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5,
				  20.0, 20.5, 21.0, 21.5, 22.0, 22.5, 23.0, 23.5, 24.0, 24.5,
				  25.0, 26.0, 27.0, 28.0, 29.0,
				  30.0, 32.0, 34.0, 36.0, 38.0,
				  40.0, 44.0, 48.0, 52.0, 56.0,
				  60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0,
				  100.0, 110.0, 120.0, 130.0, 140.0, 150.0, 175.0,
				  200.0, 250.0, 350.0, 500.0, 1000.0};

//int nptbins( sizeof(ptlow)/sizeof(float) - 1 );
  
const float rochcor::zptscl[84] = {1.49177,1.45654,1.36283,1.28569,1.2418,1.12336,1.10416,1.08731,0.994051,0.96532,
				   0.94427,0.932725,0.918082,0.899665,0.898398,0.927687,0.908047,0.892392,0.924027,0.945895,
				   0.937149,0.923983,0.923387,0.955362,0.947812,0.962943,0.948781,0.961555,0.95222,0.999207,
				   0.973884,0.993013,0.953487,0.951402,0.985583,0.986603,0.981388,1.00022,1.0294,0.964748,
				   0.974592,1.01546,0.992343,1.00101,0.990866,0.98982,1.02924,1.02265,0.967695,1.02411,
				   0.97331,1.01052,1.01561,0.992594,0.976504,1.01205,0.981111,1.00078,1.02078,1.00719,
				   1.0099,1.02865,1.03845,1.03254,1.09815,1.10263,1.06302,1.0725,1.14703,1.10574,
				   1.13911,1.16947,1.1709,1.11413,1.28793,1.18953,1.20212,1.18112,1.25471,1.15329,
				   1.14276,1.17223,1.09173,2.00229};
  
const float rochcor::zptscler[84] = {0.0270027,0.0154334,0.0115338,0.00958085,0.0084683,0.00736665,0.0069567,0.00671434,
				     0.00617693,0.00601943,0.00594735,0.00594569,0.00594903,0.00595495,0.00608115,0.00633704,
				     0.0063916,0.0064468,0.00678106,0.00706769,0.00717517,0.00727958,0.00747182,0.00785544,
				     0.00798754,0.00828787,0.00839147,0.00865826,0.00876775,0.00933276,0.00935768,0.0097289,
				     0.00962058,0.00983828,0.0103044,0.0104871,0.0106575,0.0110388,0.0114986,0.0111494,
				     0.0115202,0.0121059,0.0121345,0.0124923,0.0125972,0.0128401,0.0134519,0.0136279,
				     0.0133414,0.014186,0.00992195,0.0105984,0.0109484,0.0111756,0.0114579,0.00870013,
				     0.00904749,0.00970734,0.0104583,0.0109818,0.00837852,0.00939894,0.010415,0.0113433,
				     0.013007,0.0128788,0.0140174,0.0156993,0.0181717,0.019765,0.0222326,0.0249408,
				     0.0272806,0.0211706,0.0278087,0.0306654,0.0361387,0.041327,0.0341513,0.0440116,
				     0.0473006,0.0680212,0.149162,0.56279};

//static float dsys[8][8];
//static float msys[8][8];

rochcor::~rochcor(){
}

rochcor::rochcor(){
  
  eran1.SetSeed(123456);
  eran2.SetSeed(234567);
  
  sran1.SetSeed(1234);
  sran2.SetSeed(2345);
  
  /*
  for(int i=0; i<8; i++){
    for(int j=0; j<8; j++){
      dsys[i][j] = float(sran1.Integer(3))-1.0;
      msys[i][j] = float(sran2.Integer(3))-1.0;
    }
  }
  */

}

void rochcor::momcor_mc( TLorentzVector& mu, TLorentzVector& mubar, int moption, float sysdev, int runopt){
  
  //sysdev == num : deviation = num

  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();

  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);
  
  float mptsys1 = sran1.Gaus(0.0,sysdev);
  float mptsys2 = sran2.Gaus(0.0,sysdev);
  
  float dm1 = 0.0;
  float da1 = 0.0;
  
  float dm2 = 0.0;
  float da2 = 0.0;
  
  if(runopt == 0){
    dm1 = (mcor_bfA[mu_phibin][mu_etabin] + mptsys1*mcor_bfAer[mu_phibin][mu_etabin])/mmavgA[mu_phibin][mu_etabin];
    da1 = mcor_maA[mu_phibin][mu_etabin] + mptsys1*mcor_maAer[mu_phibin][mu_etabin];
    
    dm2 = (mcor_bfA[mub_phibin][mub_etabin] + mptsys2*mcor_bfAer[mub_phibin][mub_etabin])/mpavgA[mub_phibin][mub_etabin];
    da2 = mcor_maA[mub_phibin][mub_etabin] + mptsys2*mcor_maAer[mub_phibin][mub_etabin];
  }else if(runopt == 1){
    dm1 = (mcor_bfB[mu_phibin][mu_etabin] + mptsys1*mcor_bfBer[mu_phibin][mu_etabin])/mmavgB[mu_phibin][mu_etabin];
    da1 = mcor_maB[mu_phibin][mu_etabin] + mptsys1*mcor_maBer[mu_phibin][mu_etabin];
    
    dm2 = (mcor_bfB[mub_phibin][mub_etabin] + mptsys2*mcor_bfBer[mub_phibin][mub_etabin])/mpavgB[mub_phibin][mub_etabin];
    da2 = mcor_maB[mub_phibin][mub_etabin] + mptsys2*mcor_maBer[mub_phibin][mub_etabin];
  }

  float cor1 = 1.0/(1.0 + dm1 - da1*ptmu);
  float cor2 = 1.0/(1.0 + dm2 + da2*ptmub);
 
  //for the momentum tuning - eta,phi,Q correction
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;

  float recm = 0.0;
  float drecm = 0.0; 
  float delta = 0.0;
  float sf = 0.0;
  
  if(runopt==0){
    recm = recmA;
    drecm = drecmA;
    
    delta = deltaA;
    sf = sfA;
  }else if(runopt==1){
    recm = recmB;
    drecm = drecmB;
    
    delta = deltaB;
    sf = sfB;
  }
  
  float tune1 = 1.0/(1.0 + delta*sqrt(px1*px1 + py1*py1)*eran1.Gaus(1.0,sf));
  float tune2 = 1.0/(1.0 + delta*sqrt(px2*px2 + py2*py2)*eran2.Gaus(1.0,sf));
  
  px1 *= (tune1); 
  py1 *= (tune1);  
  pz1 *= (tune1);  
  e1 *= (tune1);   
  
  px2 *= (tune2); 
  py2 *= (tune2);  
  pz2 *= (tune2);  
  e2 *= (tune2);   
    
  
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recm);
  else if(moption==1) gscl = (genm_smr/recm);
  else if(moption==2) gscl = (drecm/recm);
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;

  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);
  
}


void rochcor::momcor_data( TLorentzVector& mu, TLorentzVector& mubar, int moption, float sysdev, int runopt){
    
  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();
  
  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);
  
  float mptsys1 = sran1.Gaus(0.0,sysdev);
  float mptsys2 = sran2.Gaus(0.0,sysdev);
  
  float dm1 = 0.0;
  float da1 = 0.0;
  
  float dm2 = 0.0;
  float da2 = 0.0;
  
  if(runopt==0){
    dm1 = (dcor_bfA[mu_phibin][mu_etabin] + mptsys1*dcor_bfAer[mu_phibin][mu_etabin])/dmavgA[mu_phibin][mu_etabin];
    da1 = dcor_maA[mu_phibin][mu_etabin] + mptsys1*dcor_maAer[mu_phibin][mu_etabin];
    
    dm2 = (dcor_bfA[mub_phibin][mub_etabin] + mptsys2*dcor_bfAer[mub_phibin][mub_etabin])/dpavgA[mub_phibin][mub_etabin];
    da2 = dcor_maA[mub_phibin][mub_etabin] + mptsys2*dcor_maAer[mub_phibin][mub_etabin];
  }else if(runopt==1){
    dm1 = (dcor_bfB[mu_phibin][mu_etabin] + mptsys1*dcor_bfBer[mu_phibin][mu_etabin])/dmavgB[mu_phibin][mu_etabin];
    da1 = dcor_maB[mu_phibin][mu_etabin] + mptsys1*dcor_maBer[mu_phibin][mu_etabin];
    
    dm2 = (dcor_bfB[mub_phibin][mub_etabin] + mptsys2*dcor_bfBer[mub_phibin][mub_etabin])/dpavgB[mub_phibin][mub_etabin];
    da2 = dcor_maB[mub_phibin][mub_etabin] + mptsys2*dcor_maBer[mub_phibin][mub_etabin];
  }
  
  float cor1 = 1.0/(1.0 + dm1 - da1*ptmu);
  float cor2 = 1.0/(1.0 + dm2 + da2*ptmub);
  
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;
  
  //after Z pt correction
  float recm = 0.0;
  
  if(runopt==0){
    recm = drecmA;
  }else if(runopt==1){
    recm = drecmB;
  }
  
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recm);
  else if(moption==1) gscl = (genm_smr/recm);
  else if(moption==2) gscl = 1.0;
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;
  
  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);
  
}

void rochcor::momcor_mc_muscle( TLorentzVector& mu, TLorentzVector& mubar, int moption, float sysdev){
  
  //sysdev == num : deviation = num

  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();

  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);
  
  float mptsys1 = sran1.Gaus(0.0,sysdev);
  float mptsys2 = sran2.Gaus(0.0,sysdev);

  float dm1 = (mcor_bfA[mu_phibin][mu_etabin] + mptsys1*mcor_bfAer[mu_phibin][mu_etabin])/mmavgA[mu_phibin][mu_etabin];
  float da1 = mcor_maA[mu_phibin][mu_etabin] + mptsys1*mcor_maAer[mu_phibin][mu_etabin];
    
  float dm2 = (mcor_bfA[mub_phibin][mub_etabin] + mptsys2*mcor_bfAer[mub_phibin][mub_etabin])/mpavgA[mub_phibin][mub_etabin];
  float da2 = mcor_maA[mub_phibin][mub_etabin] + mptsys2*mcor_maAer[mub_phibin][mub_etabin];
    
  float cor1 = 1.0/(1.0 + dm1 - da1*ptmu);
  float cor2 = 1.0/(1.0 + dm2 + da2*ptmub);
  
  //for the momentum tuning - eta,phi,Q correction
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;
    
  float tune1 = 1.0/(1.0 + delta_muscle*sqrt(px1*px1 + py1*py1)*eran1.Gaus(1.0,sf_muscle));
  float tune2 = 1.0/(1.0 + delta_muscle*sqrt(px2*px2 + py2*py2)*eran2.Gaus(1.0,sf_muscle));
  
  px1 *= (tune1); 
  py1 *= (tune1);  
  pz1 *= (tune1);  
  e1 *= (tune1);   
  
  px2 *= (tune2); 
  py2 *= (tune2);  
  pz2 *= (tune2);  
  e2 *= (tune2);   
  
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recmA);
  else if(moption==1) gscl = (genm_smr/recmA);
  else if(moption==2) gscl = (drecmA/recmA);
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;
    
  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);
  
}


void rochcor::momcor_data_muscle( TLorentzVector& mu, TLorentzVector& mubar, int moption, float sysdev){
    
  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();
  
  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);
  
  float mptsys1 = sran1.Gaus(0.0,sysdev);
  float mptsys2 = sran2.Gaus(0.0,sysdev);
  
  float dm1 = dcor_bf_muscle[mu_phibin][mu_etabin] + mptsys1*dcor_bfer_muscle[mu_phibin][mu_etabin];
  float da1 = dcor_ma_muscle[mu_phibin][mu_etabin] + mptsys1*dcor_maer_muscle[mu_phibin][mu_etabin];
  
  float dm2 = dcor_bf_muscle[mub_phibin][mub_etabin] + mptsys2*dcor_bfer_muscle[mub_phibin][mub_etabin];
  float da2 = dcor_ma_muscle[mub_phibin][mub_etabin] + mptsys2*dcor_maer_muscle[mub_phibin][mub_etabin];
  
  float cor1 = 1.0/(1.0 + dm1/dmavg_muscle[mu_phibin][mu_etabin] - da1*ptmu);
  float cor2 = 1.0/(1.0 + dm2/dpavg_muscle[mu_phibin][mu_etabin] + da2*ptmub);
  
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;
  
  //after Z pt correction
  float genm_smr = 9.09956e+01; //gen mass peak with eta dependent gaussian smearing => better match in Z mass profile vs. eta/phi
  float genm = 91.06; //gen mass peak without smearing => Z mass profile vs. eta/phi in CMS note
  float recm = 9.09109e+01; //rec mass peak in data
  
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recm);
  else if(moption==1) gscl = (genm_smr/recm);
  else if(moption==2) gscl = 1.0;
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;
  
  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);

}

void rochcor::momcor_mc_sidra( TLorentzVector& mu, TLorentzVector& mubar, int moption, float sysdev){
  
  //sysdev == num : deviation = num

  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();

  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);
  
  float mptsys1 = sran1.Gaus(0.0,sysdev);
  float mptsys2 = sran2.Gaus(0.0,sysdev);
  
  float dm1 = (mcor_bfA[mu_phibin][mu_etabin] + mptsys1*mcor_bfAer[mu_phibin][mu_etabin])/mmavgA[mu_phibin][mu_etabin];
  float da1 = mcor_maA[mu_phibin][mu_etabin] + mptsys1*mcor_maAer[mu_phibin][mu_etabin];
  
  float dm2 = (mcor_bfA[mub_phibin][mub_etabin] + mptsys2*mcor_bfAer[mub_phibin][mub_etabin])/mpavgA[mub_phibin][mub_etabin];
  float da2 = mcor_maA[mub_phibin][mub_etabin] + mptsys2*mcor_maAer[mub_phibin][mub_etabin];
  
  float cor1 = 1.0/(1.0 + dm1 - da1*ptmu);
  float cor2 = 1.0/(1.0 + dm2 + da2*ptmub);
  
  //for the momentum tuning - eta,phi,Q correction
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;
  
  float tune1 = 1.0/(1.0 + delta_sidra*sqrt(px1*px1 + py1*py1)*eran1.Gaus(1.0,sf_sidra));
  float tune2 = 1.0/(1.0 + delta_sidra*sqrt(px2*px2 + py2*py2)*eran2.Gaus(1.0,sf_sidra));
  
  px1 *= (tune1); 
  py1 *= (tune1);  
  pz1 *= (tune1);  
  e1 *= (tune1);   
  
  px2 *= (tune2); 
  py2 *= (tune2);  
  pz2 *= (tune2);  
  e2 *= (tune2);   
    
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recmA);
  else if(moption==1) gscl = (genm_smr/recmA);
  else if(moption==2) gscl = (drecmA/recmA);
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;
    
  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);
  
}


void rochcor::momcor_data_sidra( TLorentzVector& mu, TLorentzVector& mubar, int moption, float sysdev){
    
  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();
  
  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);
  
  float mptsys1 = sran1.Gaus(0.0,sysdev);
  float mptsys2 = sran2.Gaus(0.0,sysdev);
  
  float dm1 = dcor_bf_sidra[mu_phibin][mu_etabin] + mptsys1*dcor_bfer_sidra[mu_phibin][mu_etabin];
  float da1 = dcor_ma_sidra[mu_phibin][mu_etabin] + mptsys1*dcor_maer_sidra[mu_phibin][mu_etabin];
  
  float dm2 = dcor_bf_sidra[mub_phibin][mub_etabin] + mptsys2*dcor_bfer_sidra[mub_phibin][mub_etabin];
  float da2 = dcor_ma_sidra[mub_phibin][mub_etabin] + mptsys2*dcor_maer_sidra[mub_phibin][mub_etabin];
  
  float cor1 = 1.0/(1.0 + dm1/dmavg_sidra[mu_phibin][mu_etabin] - da1*ptmu);
  float cor2 = 1.0/(1.0 + dm2/dpavg_sidra[mu_phibin][mu_etabin] + da2*ptmub);
  
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;
  
  //after Z pt correction
  float genm_smr = 9.09956e+01; //gen mass peak with eta dependent gaussian smearing => better match in Z mass profile vs. eta/phi
  float genm = 91.06; //gen mass peak without smearing => Z mass profile vs. eta/phi in CMS note
  float recm = 9.08884e+01; //rec mass peak in data
  
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recm);
  else if(moption==1) gscl = (genm_smr/recm);
  else if(moption==2) gscl = 1.0;
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;
  
  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);

}

void rochcor::musclefit_data( TLorentzVector& mu, TLorentzVector& mubar){

  float dpar1 = 0.0;
  float dpar2 = 0.0;
  float epar1 = 0.0;
  float epar2 = 0.0;
  
  if(fabs(mu.PseudoRapidity())<=0.9){
    dpar1 = d0par;
    epar1 = e0par;
  }else if(mu.PseudoRapidity()>0.9){
    dpar1 = d1par;
    epar1 = e1par;
  }else if(mu.PseudoRapidity()<-0.9){
    dpar1 = d2par;
    epar1 = e2par;
  }

  if(fabs(mubar.PseudoRapidity())<=0.9){
    dpar2 = d0par;
    epar2 = e0par;
  }else if(mubar.PseudoRapidity()>0.9){
    dpar2 = d1par;
    epar2 = e1par;
  }else if(mubar.PseudoRapidity()<-0.9){
    dpar2 = d2par;
    epar2 = e2par;
  }

  float corr1 = 1.0 + bpar*mu.Pt() + (-1.0)*cpar*mu.Pt()*TMath::Sign(float(1.0),float(mu.PseudoRapidity()))*TMath::Power(mu.PseudoRapidity(),2)
    + (-1.0)*dpar1*mu.Pt()*sin(mu.Phi() + epar1);
  float corr2 = 1.0 + bpar*mubar.Pt() + (1.0)*cpar*mubar.Pt()*TMath::Sign(float(1.0),float(mubar.PseudoRapidity()))*TMath::Power(mubar.PseudoRapidity(),2)
    + (1.0)*dpar2*mubar.Pt()*sin(mubar.Phi() + epar2);
  
  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();
  
  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();

  px1 *= corr1;
  py1 *= corr1;
  pz1 *= corr1;
  e1 *= corr1;
  
  px2 *= corr2;
  py2 *= corr2;
  pz2 *= corr2;
  e2 *= corr2;
  
  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);

}

Int_t rochcor::phibin(float phi){
  
  int nphibin = -1;
  
  for(int i=0; i<8; i++){
    if(-pi+(2.0*pi/8.0)*i <= phi && -pi+(2.0*pi/8.0)*(i+1) > phi){
      nphibin = i;
      break;
    }
  }
  
  return nphibin;
}

Int_t rochcor::etabin(float eta){

  int nbin = -1;
  
  for(int i=0; i<8; i++){
    if(netabin[i] <= eta && netabin[i+1] > eta){
      nbin = i;
      break;
    }
  }
  
  return nbin;
}

float rochcor::zptcor(float gzpt) {
  int ibin( 0 );
  
  // mcptscl[] = 84 bins: [0] and [83] are the underflow and overflow
  if ( gzpt > ptlow[nptbins] ) return nptbins-1;
  if ( gzpt < ptlow[0      ] ) return 0;
  
  for ( int i=0; i<nptbins; ++i ) {
    if ( gzpt>=ptlow[i] && gzpt<ptlow[i+1] ) { ibin=i; break; }
  }

  float zptwt = zptscl[ibin];

  return zptwt;
}
